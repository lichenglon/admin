!
	function(d) {
		var e = {};
		d(document).ready(function() {
			return d("#area-chartist-chart").length && e.area(), d("#bar-chartist-chart").length && e.bar(), d("#bi-polar-area-chartist-chart").length && e.biPolarArea(), d("#bi-polar-bar-chartist-chart").length && e.biPolarBar(), d("#donut-bar-chartist-chart").length && e.donut(), d("#donut-animation-bar-chartist-chart").length && e.donutAnimation(), d("#gauge-bar-chartist-chart").length && e.gauge(), d("#horizontal-bar-chartist-chart").length && e.horizontalBar(), d("#line-chartist-chart").length && e.line(), d("#pie-bar-chartist-chart").length && e.pie(), d("#scatter-chartist-chart").length && e.scatter(), d("#smil-animation-chartist-chart").length && e.smilAnimation(), d("#smil-animation-index-chartist-chart").length && e.smilAnimationIndex(), d("#stacked-bar-chartist-chart").length && e.stackedBar(), d("#svg-animation-chartist-chart").length && e.svgAnimation(), !1
		});
		e = {
			area: function() {
				return new Chartist.Line("#area-chartist-chart", {
					labels: [1, 2, 3, 4, 5, 6, 7, 8],
					series: [
						[5, 9, 7, 8, 5, 3, 5, 4]
					]
				}, {
					low: 0,
					showArea: !0,
					fullWidth: !0,
					axisY: {
						offset: 10
					}
				}), !1
			},
			bar: function() {
				return new Chartist.Bar("#bar-chartist-chart", {
					labels: ["Quarter 1", "Quarter 2", "Quarter 3", "Quarter 4"],
					series: [
						[5, 4, 3, 7],
						[3, 2, 9, 5],
						[1, 5, 8, 4],
						[2, 3, 4, 6],
						[4, 1, 2, 1]
					]
				}, {
					stackBars: !0,
					axisX: {
						labelInterpolationFnc: function(c) {
							return c.split(/\s+/).map(function(b) {
								return b[0]
							}).join("")
						}
					},
					axisY: {
						offset: 10
					}
				}, [
					["screen and (min-width: 400px)",
						{
							reverseData: !0,
							horizontalBars: !0,
							axisX: {
								labelInterpolationFnc: Chartist.noop
							},
							axisY: {
								offset: 20
							}
						}],
					["screen and (min-width: 800px)",
						{
							stackBars: !1,
							seriesBarDistance: 10
						}],
					["screen and (min-width: 1000px)",
						{
							reverseData: !1,
							horizontalBars: !1,
							seriesBarDistance: 15
						}]
				]), !1
			},
			biPolarArea: function() {
				return new Chartist.Line("#bi-polar-area-chartist-chart", {
					labels: [1, 2, 3, 4, 5, 6, 7, 8],
					series: [
						[1, 2, 3, 1, -2, 0, 1, 0],
						[-2, -1, -2, -1, -2.5, -1, -2, -1],
						[0, 0, 0, 1, 2, 2.5, 2, 1],
						[2.5, 2, 1, .5, 1, .5, -1, -2.5]
					]
				}, {
					high: 3,
					low: -3,
					showArea: !0,
					showLine: !1,
					showPoint: !1,
					fullWidth: !0,
					axisY: {
						offset: 20
					},
					axisX: {
						showLabel: !1,
						showGrid: !1
					}
				}), !1
			},
			biPolarBar: function() {
				return new Chartist.Bar("#bi-polar-bar-chartist-chart", {
					labels: "W1 W2 W3 W4 W5 W6 W7 W8 W9 W10".split(" "),
					series: [
						[1, 2, 4, 8, 6, -2, -1, -4, -6, -2]
					]
				}, {
					high: 10,
					low: -10,
					axisX: {
						labelInterpolationFnc: function(c, b) {
							return 0 === b % 2 ? c : null
						}
					},
					fullWidth: !0,
					axisY: {
						offset: 10
					}
				}), !1
			},
			donut: function() {
				var c = {
						series: [20, 10, 30, 40]
					},
					b = function(a, b) {
						return a + b
					};
				return new Chartist.Pie("#donut-bar-chartist-chart", c, {
					labelInterpolationFnc: function(a) {
						return Math.round(a / c.series.reduce(b) * 100) + "%"
					},
					donut: !0,
					donutWidth: 80,
					startAngle: 270
				}), !1
			},
			donutAnimation: function() {
				var c = new Chartist.Pie("#donut-animation-bar-chartist-chart", {
					series: [10, 20, 50, 20, 5, 50, 15],
					labels: [1, 2, 3, 4, 5, 6, 7]
				}, {
					donut: !0,
					showLabel: !1
				});
				return c.on("draw", function(b) {
					if ("slice" === b.type) {
						var a = b.element._node.getTotalLength();
						b.element.attr({
							"stroke-dasharray": a + "px " + a + "px"
						});
						var c = {
							"stroke-dashoffset": {
								id: "anim" + b.index,
								dur: 1E3,
								from: -a + "px",
								to: "0px",
								easing: Chartist.Svg.Easing.easeOutQuint,
								fill: "freeze"
							}
						};
						0 !== b.index && (c["stroke-dashoffset"].begin = "anim" + (b.index - 1) + ".end");
						b.element.attr({
							"stroke-dashoffset": -a + "px"
						});
						b.element.animate(c, !1)
					}
				}), c.on("created", function() {
					window.__anim21278907124 && (clearTimeout(window.__anim21278907124), window.__anim21278907124 = null);
					window.__anim21278907124 = setTimeout(c.update.bind(c), 1E4)
				}), !1
			},
			gauge: function() {
				return new Chartist.Pie("#gauge-bar-chartist-chart", {
					series: [20, 10, 30, 40]
				}, {
					donut: !0,
					donutWidth: 60,
					startAngle: 270,
					total: 200,
					showLabel: !1
				}), !1
			},
			horizontalBar: function() {
				return new Chartist.Bar("#horizontal-bar-chartist-chart", {
					labels: "Monday Tuesday Wednesday Thursday Friday Saturday Sunday".split(" "),
					series: [
						[5, 4, 3, 7, 5, 10, 3],
						[3, 2, 9, 5, 4, 6, 4]
					]
				}, {
					seriesBarDistance: 10,
					reverseData: !0,
					horizontalBars: !0,
					axisY: {
						offset: 70
					}
				}), !1
			},
			line: function() {
				return new Chartist.Line("#line-chartist-chart", {
					labels: ["1", "2", "3", "4", "5"],
					series: [
						[12, 9, 7, 8, 5],
						[2, 1, 3.5, 7, 3],
						[1, 3, 4, 5, 6]
					]
				}, {
					fullWidth: !0,
					axisY: {
						offset: 10
					},
					chartPadding: {
						right: 30
					}
				}), !1
			},
			pie: function() {
				var c = {
						series: [5, 3, 4]
					},
					b = function(a, b) {
						return a + b
					};
				return new Chartist.Pie("#pie-bar-chartist-chart", c, {
					labelInterpolationFnc: function(a) {
						return Math.round(a / c.series.reduce(b) * 100) + "%"
					}
				}), !1
			},
			scatter: function() {
				var c = Array.apply(null, Array(52)).map(Math.random).reduce(function(b, a, c) {
					return b.labels.push(c + 1), b.series.forEach(function(a) {
						a.push(100 * Math.random())
					}), b
				}, {
					labels: [],
					series: Array.apply(null, Array(4)).map(function() {
						return []
					})
				});
				return new Chartist.Line("#scatter-chartist-chart", c, {
					showLine: !1,
					axisX: {
						labelInterpolationFnc: function(b, a) {
							return 0 === a % 13 ? "W" + b : null
						}
					},
					fullWidth: !0,
					axisY: {
						offset: 20
					}
				}, [
					["screen and (min-width: 640px)",
						{
							axisX: {
								labelInterpolationFnc: function(b, a) {
									return 0 === a % 4 ? "W" + b : null
								}
							}
						}]
				]), !1
			},
			smilAnimation: function() {
				var c = new Chartist.Line("#smil-animation-chartist-chart", {
						labels: "1 2 3 4 5 6 7 8 9 10 11 12".split(" "),
						series: [
							[12, 9, 7, 8, 5, 4, 6, 2, 3, 3, 4, 6],
							[4, 5, 3, 7, 3, 5, 5, 3, 4, 4, 5, 5],
							[5, 3, 4, 5, 6, 3, 3, 4, 5, 6, 3, 4],
							[3, 4, 5, 6, 7, 6, 4, 5, 6, 7, 6, 3]
						]
					}, {
						low: 0
					}),
					b = 0;
				return c.on("created", function() {
					b = 0
				}), c.on("draw", function(a) {
					if (b++, "line" === a.type) a.element.animate({
						opacity: {
							begin: 80 * b + 1E3,
							dur: 500,
							from: 0,
							to: 1
						}
					});
					else if ("label" === a.type && "x" === a.axis) a.element.animate({
						y: {
							begin: 80 * b,
							dur: 500,
							from: a.y + 100,
							to: a.y,
							easing: "easeOutQuart"
						}
					});
					else if ("label" === a.type && "y" === a.axis) a.element.animate({
						x: {
							begin: 80 * b,
							dur: 500,
							from: a.x - 100,
							to: a.x,
							easing: "easeOutQuart"
						}
					});
					else if ("point" === a.type) a.element.animate({
						x1: {
							begin: 80 * b,
							dur: 500,
							from: a.x - 10,
							to: a.x,
							easing: "easeOutQuart"
						},
						x2: {
							begin: 80 * b,
							dur: 500,
							from: a.x - 10,
							to: a.x,
							easing: "easeOutQuart"
						},
						opacity: {
							begin: 80 * b,
							dur: 500,
							from: 0,
							to: 1,
							easing: "easeOutQuart"
						}
					});
					else if ("grid" === a.type) {
						var c = {
								begin: 80 * b,
								dur: 500,
								from: a[a.axis.units.pos + "2"] - 100,
								to: a[a.axis.units.pos + "2"],
								easing: "easeOutQuart"
							},
							d = {};
						d[a.axis.units.pos + "1"] = {
							begin: 80 * b,
							dur: 500,
							from: a[a.axis.units.pos + "1"] - 30,
							to: a[a.axis.units.pos + "1"],
							easing: "easeOutQuart"
						};
						d[a.axis.units.pos + "2"] = c;
						d.opacity = {
							begin: 80 * b,
							dur: 500,
							from: 0,
							to: 1,
							easing: "easeOutQuart"
						};
						a.element.animate(d)
					}
				}), c.on("created", function() {
					window.__exampleAnimateTimeout && (clearTimeout(window.__exampleAnimateTimeout), window.__exampleAnimateTimeout = null);
					window.__exampleAnimateTimeout = setTimeout(c.update.bind(c), 12E3)
				}), !1
			},
			smilAnimationIndex: function() {
				var c = new Chartist.Line("#smil-animation-index-chartist-chart", {
						labels: "Monday Tuesday Wednesday Thursday Friday Saturday Sunday ".split(" "),
						series: [
							[8, 5, 4, 6, 2, 3, 3, 4, ],
							//[7, 3, 5, 5, 3, 4, 4, 5, ]
						]
					}, {
						low: 0,
						fullWidth: !0,
						chartPadding: {
							right: 30
						}
					}),
					b = 0;
				return c.on("created", function() {
					b = 0
				}), c.on("draw", function(a) {
					if (b++, "line" === a.type) a.element.animate({
						opacity: {
							begin: 80 * b + 1E3,
							dur: 500,
							from: 0,
							to: 1
						}
					});
					else if ("label" === a.type && "x" === a.axis) a.element.animate({
						y: {
							begin: 80 * b,
							dur: 500,
							from: a.y + 100,
							to: a.y,
							easing: "easeOutQuart"
						}
					});
					else if ("label" === a.type && "y" === a.axis) a.element.animate({
						x: {
							begin: 80 * b,
							dur: 500,
							from: a.x - 100,
							to: a.x,
							easing: "easeOutQuart"
						}
					});
					else if ("point" === a.type) a.element.animate({
						x1: {
							begin: 80 * b,
							dur: 500,
							from: a.x - 10,
							to: a.x,
							easing: "easeOutQuart"
						},
						x2: {
							begin: 80 * b,
							dur: 500,
							from: a.x - 10,
							to: a.x,
							easing: "easeOutQuart"
						},
						opacity: {
							begin: 80 * b,
							dur: 500,
							from: 0,
							to: 1,
							easing: "easeOutQuart"
						}
					});
					else if ("grid" === a.type) {
						var c = {
								begin: 80 * b,
								dur: 500,
								from: a[a.axis.units.pos + "2"] - 100,
								to: a[a.axis.units.pos + "2"],
								easing: "easeOutQuart"
							},
							d = {};
						d[a.axis.units.pos + "1"] = {
							begin: 80 * b,
							dur: 500,
							from: a[a.axis.units.pos + "1"] - 30,
							to: a[a.axis.units.pos + "1"],
							easing: "easeOutQuart"
						};
						d[a.axis.units.pos + "2"] = c;
						d.opacity = {
							begin: 80 * b,
							dur: 500,
							from: 0,
							to: 1,
							easing: "easeOutQuart"
						};
						a.element.animate(d)
					}
				}), c.on("created", function() {
					window.__exampleAnimateTimeout && (clearTimeout(window.__exampleAnimateTimeout), window.__exampleAnimateTimeout = null);
					window.__exampleAnimateTimeout = setTimeout(c.update.bind(c), 12E3)
				}), !1
			},
			stackedBar: function() {
				return (new Chartist.Bar("#stacked-bar-chartist-chart", {
					labels: ["Q1", "Q2", "Q3", "Q4"],
					series: [
						[8E5, 12E5, 14E5, 13E5],
						[2E5, 4E5, 5E5, 3E5],
						[1E5, 2E5, 4E5, 6E5]
					]
				}, {
					stackBars: !0,
					axisY: {
						labelInterpolationFnc: function(c) {
							return c / 1E3 + "k"
						}
					}
				})).on("draw", function(c) {
					"bar" === c.type && c.element.attr({
						style: "stroke-width: 30px"
					})
				}), !1
			},
			svgAnimation: function() {
				return (new Chartist.Line("#svg-animation-chartist-chart", {
					labels: "Mon Tue Wed Thu Fri Sat".split(" "),
					series: [
						[1, 5, 2, 5, 4, 3],
						[2, 3, 4, 8, 1, 2],
						[5, 4, 3, 2, 1, .5]
					]
				}, {
					low: 0,
					showArea: !0,
					showPoint: !1,
					fullWidth: !0,
					axisY: {
						offset: 10
					}
				})).on("draw", function(c) {
					"line" !== c.type && "area" !== c.type || c.element.animate({
						d: {
							begin: 2E3 * c.index,
							dur: 2E3,
							from: c.path.clone().scale(1, 0).translate(0, c.chartRect.height()).stringify(),
							to: c.path.clone().stringify(),
							easing: Chartist.Svg.Easing.easeOutQuint
						}
					})
				}), !1
			}
		}
	}(jQuery);